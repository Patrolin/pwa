{"version":3,"sources":["utils.ts","logo.svg","AddToHomescreen.tsx","App.js","reportWebVitals.js","index.js"],"names":["BrowserName","window","deferredInstallPrompt","addEventListener","event","alert","Utils","print","preventDefault","value","undefined","verbose","nativeInstallPrompt","this","getNativeInstallPrompt","isValueMissing","prompt","userChoice","outcome","matchMedia","matches","Boolean","chrome","navigator","userAgentData","brands","some","b","brand","test","userAgent","vendor","Edge","opr","Opera","SamsungInternet","isChromium","Chrome","Vivaldi","Yandex","Firefox","Safari","InternetExplorer","Unknown","str","values","replace","match","group1","String","depth","constructor","name","format","map","v","join","valuesString","Array","from","document","entriesString","Object","keys","k","AddToHomescreen","defaultData","getShouldShowAdvert","getAdvert","getGuidancePrompt","forceShowAdvert","_data","useMemo","__data","localStorage","getItem","JSON","parse","error","shouldShowAdvert","useState","pageVisits","data","setData","useEffect","console","log","setItem","stringify","useAddToHomeScreenData","nativePrompt","setNativePrompt","guidancePromptCloseCallback","useCallback","setShouldShowGuidancePrompt","guidancePrompt","canShowPrompt","setCanShowPrompt","setTimeout","newNativePrompt","canShowNativePrompt","canShowGuidancePrompt","newCanShowPrompt","isDesktop","shouldShowGuidancePrompt","advertYesCallback","showNativeInstallPromptIfExists","dismissCount","advertNoCallback","App","flags","isIpad","isIphone","isAndroid","isSamsung","flagsSet","Set","entries","filter","flag","className","src","logo","alt","getBrowserName","style","display","gap","Button","variant","color","onClick","a","location","href","onYes","onNo","boxSizing","position","bottom","width","justifyContent","padding","background","alignItems","IconButton","onClose","isIos","Dialog","open","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d27297a2.chunk.js","sourcesContent":["export type BeforeInstallEventPrompt = {\n    prompt: () => void,\n    userChoice: Promise<{ outcome: string }>;\n}\n\ndeclare global {\n    interface Window {\n        chrome: any | undefined,\n        opr: any | undefined,\n        deferredInstallPrompt: BeforeInstallEventPrompt|null|undefined;\n    }\n    interface Navigator {\n        userAgentData: { brands: { brand: string }[] } | undefined,\n    }\n}\n\nwindow.deferredInstallPrompt = null;\n\nwindow.addEventListener(\"beforeinstallprompt\", (event) => {\n  alert(`beforeinstallprompt ${Utils.print(event)}`);\n  event.preventDefault();\n  // @ts-ignore\n  window.deferredInstallPrompt = event;\n});\nwindow.addEventListener(\"appinstalled\", () => {\n  alert(\"appinstalled\");\n  window.deferredInstallPrompt = null;\n});\n\nexport enum BrowserName {\n    Edge = \"Edge\",\n    Opera = \"Opera\",\n    SamsungInternet = \"Samsung Internet\",\n    Chrome = \"Chrome\",\n    Vivaldi = \"Vivaldi\",\n    Yandex = \"Yandex\",\n    Firefox = \"Firefox\",\n    Safari = \"Safari\",\n    InternetExplorer = \"Internet Explorer\",\n    Unknown = \"Unknown\",\n}\n\nclass Utils {\n    public static isValueMissing(value: any): boolean {\n        return (value === undefined) || (value === null);\n    }\n\n    // Add to homescreen\n    public static getNativeInstallPrompt() {\n        return window.deferredInstallPrompt;\n    }\n    public static async showNativeInstallPromptIfExists(verbose: boolean = false) {\n        const nativeInstallPrompt = this.getNativeInstallPrompt();\n        alert(`Install prompt: ${Utils.print(nativeInstallPrompt)}`);\n        if (this.isValueMissing(nativeInstallPrompt)) return;\n        nativeInstallPrompt!.prompt();\n        const { outcome } = await nativeInstallPrompt!.userChoice;\n        if (verbose) alert(`Install outcome: ${Utils.print(outcome)}`);\n        window.deferredInstallPrompt = null;\n    }\n\n    public static isDesktop(): boolean {\n        return window.matchMedia(\"(hover: hover) and (pointer: fine)\").matches;\n    }\n    public static isChromium(): boolean {\n        return Boolean(window.chrome || (navigator.userAgentData?.brands ?? []).some(b => b.brand === \"Google Chrome\"));\n    }\n    public static isIos(): boolean {\n        return Boolean(/iPad|iPhone|iPod/i.test(window.navigator.userAgent));\n    }\n    public static isIpad(): boolean {\n        return Boolean(/iPad/i.test(window.navigator.userAgent));\n    }\n    public static isIphone(): boolean {\n        return Boolean(/iPhone|iPod/i.test(window.navigator.userAgent));\n    }\n    public static isAndroid(): boolean {\n        return Boolean(/Android/i.test(window.navigator.userAgent));\n    }\n    public static isSamsung(): boolean {\n        return Boolean(/SAMSUNG|Samsung|SGH-[I|N|T]|GT-[I|N]|SM-[A|N|P|T|Z]|SHV-E|SCH-[I|J|R|S]|SPH-L/i.test(window.navigator.userAgent));\n    }\n    public static getBrowserName(): BrowserName {\n        const userAgent = window.navigator.userAgent;\n        const vendor = window.navigator.vendor;\n        switch (true) {\n            case /Edge|Edg|EdgiOS/i.test(userAgent):\n                return BrowserName.Edge;\n            case /OPR|Opera/i.test(userAgent) && Boolean(window.opr):\n                return BrowserName.Opera;\n            case /SamsungBrowser/i.test(userAgent):\n                return BrowserName.SamsungInternet;\n            case /CriOS/i.test(userAgent):\n            case /Chrome/i.test(userAgent) && vendor === \"Google Inc.\" && this.isChromium():\n                return BrowserName.Chrome;\n            case /Vivaldi/i.test(userAgent):\n                return BrowserName.Vivaldi;\n            case /YaBrowser/i.test(userAgent):\n                return BrowserName.Yandex;\n            case /Firefox|FxiOS/i.test(userAgent):\n                return BrowserName.Firefox;\n            case /Safari/i.test(userAgent):\n                return BrowserName.Safari;\n            case /MSIE|Trident|IEMobile|WPDesktop/i.test(userAgent):\n                return BrowserName.InternetExplorer;\n            default:\n                return BrowserName.Unknown;\n        }\n    }\n\n    // formatting\n    public static format(str: string, values: any[]): string {\n        return str.replace(/%(\\d+)/g, (match: string, group1: string) => {\n            return String(values?.[+group1] ?? \"\");\n        });\n    }\n    public static print(value: any, depth = 1): string {\n        if (depth >= 3) return \"\";\n        switch (value?.constructor?.name) {\n            case \"String\":\n                return this.format(\"\\\"%0\\\"\", [value]);\n            case \"Number\":\n            case \"boolean\":\n            case undefined:\n                return String(value);\n            case \"Array\":\n                return this.format(\"[%0]\", [value.map((v: any) => this.print(v, depth+1)).join(\", \")]);\n            case \"Set\":\n                const valuesString = Array.from(value as Set<any>).map(v => this.print(v, depth+1)).join(\", \");\n                return this.format(\"{%0}\", [valuesString]);\n            default:\n                if (value === window || value === document) return \"\";\n                const entriesString = Object.keys(value).map((k) => this.format(\"%0: %1\", [this.print(k, depth+1), this.print(value[k], depth+1)])).join(\", \")\n                return this.format(\"{%0}\", [entriesString]);\n        }\n    }\n}\nexport default Utils;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport Utils, { BeforeInstallEventPrompt } from \"./utils\";\n\ntype AddToHomescreenData = {\n    pageVisits: number,\n    dismissCount: number,\n}\nfunction useAddToHomeScreenData(\n    defaultData: AddToHomescreenData,\n    getShouldShowAdvert: (data: AddToHomescreenData) => boolean,\n): [AddToHomescreenData, (data: AddToHomescreenData) => void, boolean] {\n    const _data = useMemo<AddToHomescreenData>(() => {\n        const __data = localStorage.getItem(\"AddToHomeScreen\");\n        if (Utils.isValueMissing(__data)) return defaultData;\n        try {\n            return {\n                ...defaultData,\n                ...JSON.parse(__data!),\n            };\n        } catch (error) {\n            return defaultData;\n        }\n    // eslint-disable-next-line\n    }, []);\n    const shouldShowAdvert = useMemo(() => getShouldShowAdvert(_data), [getShouldShowAdvert, _data]);\n    const [data, setData] = useState({ ..._data, pageVisits: _data.pageVisits + (!shouldShowAdvert ? 1 : 0) });\n    useEffect(() => {\n        console.log(\"AddToHomeScreen\", data);\n        localStorage.setItem(\"AddToHomeScreen\", JSON.stringify(data));\n    }, [data]);\n    return [data, setData, shouldShowAdvert];\n}\n\ntype Props = {\n    defaultData: AddToHomescreenData,\n    maxDismissCount?: number,\n    getShouldShowAdvert: (data: AddToHomescreenData) => boolean,\n    getGuidancePrompt: (closeCallback: () => void) => JSX.Element|undefined|null,\n    getAdvert: (yesCallback: () => void, noCallback: () => void) => JSX.Element,\n    forceShowAdvert?: boolean,\n}\nexport const AddToHomescreen: React.FC<Props> = ({ defaultData, getShouldShowAdvert, getAdvert, getGuidancePrompt, forceShowAdvert = false }) => {\n    const [data, setData, shouldShowAdvert] = useAddToHomeScreenData(defaultData, getShouldShowAdvert);\n    // prompts\n    const [nativePrompt, setNativePrompt] = useState<BeforeInstallEventPrompt|null|undefined>(undefined);\n    const guidancePromptCloseCallback = useCallback(() => {\n        setShouldShowGuidancePrompt(false);\n    }, []);\n    const guidancePrompt = useMemo(() => getGuidancePrompt(guidancePromptCloseCallback), [getGuidancePrompt, guidancePromptCloseCallback]);\n    const [canShowPrompt, setCanShowPrompt] = useState(false);\n    useEffect(() => {\n        setTimeout(() => {\n            const newNativePrompt = Utils.getNativeInstallPrompt();\n            setNativePrompt(newNativePrompt);\n            const canShowNativePrompt = !Utils.isValueMissing(newNativePrompt);\n            const canShowGuidancePrompt = !Utils.isValueMissing(guidancePrompt);\n            const newCanShowPrompt = !Utils.isDesktop() && (canShowNativePrompt || canShowGuidancePrompt);\n            setCanShowPrompt(newCanShowPrompt);\n        }, 1000);\n    })\n    const [shouldShowGuidancePrompt, setShouldShowGuidancePrompt] = useState(false);\n    // advert\n    const advertYesCallback = useCallback(() => {\n        if (!Utils.isValueMissing(nativePrompt)) {\n            Utils.showNativeInstallPromptIfExists();\n        } else {\n            setShouldShowGuidancePrompt(true);\n        }\n        setData({ ...data, dismissCount: data.dismissCount + 1 });\n    }, [data, setData, nativePrompt]);\n    const advertNoCallback = useCallback(() => {\n        setData({ ...data, dismissCount: data.dismissCount + 1 });\n    }, [data, setData]);\n\n    return <>\n        {((canShowPrompt && shouldShowAdvert) || forceShowAdvert) && getAdvert(advertYesCallback, advertNoCallback)}\n        {canShowPrompt && shouldShowGuidancePrompt && guidancePrompt}\n    </>;\n}\n","import logo from './logo.svg';\nimport './App.css';\nimport Utils, { BrowserName } from './utils';\nimport { AddToHomescreen } from './AddToHomescreen';\nimport { Button, Dialog, IconButton } from '@material-ui/core';\nimport AndroidIcon from '@material-ui/icons/Android';\nimport CloseIcon from '@material-ui/icons/Close';\n\nfunction App() {\n    const flags = {\n        isDesktop: Utils.isDesktop(),\n        isChromium: Utils.isChromium(),\n        isIpad: Utils.isIpad(),\n        isIphone: Utils.isIphone(),\n        isAndroid: Utils.isAndroid(),\n        isSamsung: Utils.isSamsung(),\n    }\n    const flagsSet = new Set(Object.entries(flags).filter(([flag, v]) => v).map(([flag, v]) => flag));\n    return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <p>\n                    Version 5, {Utils.getBrowserName()} {Utils.print(flagsSet)} <br />\n                    window.chrome: {Utils.print(Boolean(window.chrome))} <br />\n                    window.opr: {Utils.print(Boolean(window.opr))} <br />\n                    brands: {Utils.print((navigator.userAgentData?.brands ?? []).map(b => b.brand))} <br />\n                    vendor: {Utils.print(window.navigator.vendor)} <br />\n                    userAgent: {Utils.print(window.navigator.userAgent)} <br />\n                </p>\n                <div style={{ display: \"flex\", gap: 8 }}>\n                    <Button variant=\"contained\" color=\"primary\" onClick={async () => {\n                        Utils.showNativeInstallPromptIfExists(true);\n                    }}>Install</Button>\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => {\n                        // eslint-disable-next-line\n                        window.location.href = window.location.href;\n                    }}>Reload page</Button>\n                </div>\n            </header>\n            <AddToHomescreen\n                defaultData={{ pageVisits: 0, dismissCount: 0 }}\n                getShouldShowAdvert={(data) => {\n                    if (data.dismissCount >= 20) return false;\n                    return data.pageVisits >= (3**(data.dismissCount + 1));\n                }}\n                getAdvert={(onYes, onNo) => {\n                    return <div style={{ boxSizing: \"border-box\", position: \"fixed\", bottom: 0, width: \"100%\", display: \"flex\", justifyContent: \"space-between\", padding: \"8px 4px 8px 20px\", background: \"#fff\" }}>\n                        <div style={{ display: \"flex\", alignItems: \"center\", gap: 8 }}>\n                            <AndroidIcon />\n                            <Button onClick={onYes}>Přidat aplikaci pwa na plochu</Button>\n                        </div>\n                        <IconButton onClick={onNo}><CloseIcon /></IconButton>\n                    </div>;\n                }}\n                getGuidancePrompt={(onClose) => {\n                    if (Utils.isIos()) {\n                        // TODO: add ios guidance images\n                        return undefined;\n                    }\n                    const browserName = Utils.getBrowserName();\n                    switch (browserName) {\n                        case BrowserName.Firefox:\n                            return <Dialog open={true}>\n                                {/* TODO: add firefox guidance image */}\n                                Firefox guidance prompt\n                                <IconButton onClick={onClose}><CloseIcon /></IconButton>\n                            </Dialog>;\n                        case BrowserName.Opera:\n                            return <Dialog open={true}>\n                                {/* TODO: add opera guidance image */}\n                                Opera guidance prompt\n                                <IconButton onClick={onClose}><CloseIcon /></IconButton>\n                            </Dialog>;\n                        default:\n                            return undefined;\n                    }\n                }}\n                forceShowAdvert\n            />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}