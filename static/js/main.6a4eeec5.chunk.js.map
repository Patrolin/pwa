{"version":3,"sources":["utils.ts","logo.svg","App.js","reportWebVitals.js","index.js"],"names":["BrowserName","Utils","window","matchMedia","matches","Boolean","chrome","navigator","userAgentData","brands","some","b","brand","test","userAgent","vendor","Edge","opr","Opera","SamsungInternet","this","isChromium","Chrome","Vivaldi","Yandex","Firefox","Safari","InternetExplorer","Unknown","str","values","replace","match","group1","String","App","flags","isDesktop","isIpad","isIphone","isAndroid","isSamsung","flagsString","Object","entries","filter","map","flag","join","brandsString","format","className","src","logo","alt","getBrowserName","onClick","a","deferredInstallPrompt","alert","prompt","userChoice","outcome","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","addEventListener","event","preventDefault"],"mappings":"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","file":"static/js/main.6a4eeec5.chunk.js","sourcesContent":["declare global {\n    interface Window {\n        chrome: any | undefined,\n        opr: any | undefined,\n    }\n    interface Navigator {\n        userAgentData: { brands: { brand: string }[] } | undefined,\n    }\n}\n\nexport enum BrowserName {\n    Edge = \"Edge\",\n    Opera = \"Opera\",\n    SamsungInternet = \"Samsung Internet\",\n    Chrome = \"Chrome\",\n    Vivaldi = \"Vivaldi\",\n    Yandex = \"Yandex\",\n    Firefox = \"Firefox\",\n    Safari = \"Safari\",\n    InternetExplorer = \"Internet Explorer\",\n    Unknown = \"Unknown\",\n}\n\nclass Utils {\n    public static isDesktop(): Boolean {\n        return window.matchMedia(\"(hover: hover) and (pointer: fine)\").matches;\n    }\n    public static isChromium(): Boolean {\n        return Boolean(window.chrome || navigator.userAgentData?.brands?.some(b => b.brand === \"Google Chrome\"));\n    }\n    public static isIpad(): Boolean {\n        return Boolean(/iPad/i.test(window.navigator.userAgent));\n    }\n    public static isIphone(): Boolean {\n        return Boolean(/iPhone|iPod/i.test(window.navigator.userAgent));\n    }\n    public static isAndroid(): Boolean {\n        return Boolean(/Android/i.test(window.navigator.userAgent));\n    }\n    public static isSamsung(): Boolean {\n        return Boolean(/SAMSUNG|Samsung|SGH-[I|N|T]|GT-[I|N]|SM-[A|N|P|T|Z]|SHV-E|SCH-[I|J|R|S]|SPH-L/i.test(window.navigator.userAgent));\n    }\n    public static getBrowserName(): BrowserName {\n        const userAgent = window.navigator.userAgent;\n        const vendor = window.navigator.vendor;\n        switch (true) {\n            case /Edge|Edg|EdgiOS/i.test(userAgent):\n                return BrowserName.Edge;\n            case /OPR|Opera/i.test(userAgent) && Boolean(window.opr):\n                return BrowserName.Opera;\n            case /SamsungBrowser/i.test(userAgent):\n                return BrowserName.SamsungInternet;\n            case /CriOS/i.test(userAgent):\n            case /Chrome/i.test(userAgent) && vendor === \"Google Inc.\" && this.isChromium():\n                return BrowserName.Chrome;\n            case /Vivaldi/i.test(userAgent):\n                return BrowserName.Vivaldi;\n            case /YaBrowser/i.test(userAgent):\n                return BrowserName.Yandex;\n            case /Firefox|FxiOS/i.test(userAgent):\n                return BrowserName.Firefox;\n            case /Safari/i.test(userAgent):\n                return BrowserName.Safari;\n            case /MSIE|Trident|IEMobile|WPDesktop/i.test(userAgent):\n                return BrowserName.InternetExplorer;\n            default:\n                return BrowserName.Unknown;\n        }\n    }\n    public static format(str: string, values: any[]): string {\n        return str.replace(/%(\\d+)/g, (match: string, group1: string) => {\n            return String(values?.[+group1] ?? \"\");\n        });\n    }\n}\nexport default Utils;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport Utils from './utils';\n\nfunction App() {\n    const flags = window.flags = {\n        isDesktop: Utils.isDesktop(),\n        isChromium: Utils.isChromium(),\n        isIpad: Utils.isIpad(),\n        isIphone: Utils.isIphone(),\n        isAndroid: Utils.isAndroid(),\n        isSamsung: Utils.isSamsung(),\n    }\n    const flagsString = Object.entries(flags).filter(([flag, v]) => v).map(([flag, v]) => flag).join(\", \");\n    const brandsString = (navigator.userAgentData?.brands ?? []).map(b => Utils.format(\"\\\"%0\\\"\", [b.brand])).join(\", \");\n    return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <p>\n                    Version 2, {Utils.getBrowserName()} {Utils.format(\"{%0}\", [flagsString])} <br />\n                    {Utils.format(\"window.chrome: %0\", [Boolean(window.chrome)])} <br />\n                    {Utils.format(\"window.opr: %0\", [Boolean(window.opr)])} <br />\n                    {Utils.format(\"brands: [%0]\", [brandsString])} <br />\n                    {Utils.format(\"vendor: \\\"%0\\\"\", [window.navigator.vendor])} <br />\n                    {Utils.format(\"userAgent: \\\"%0\\\"\", [window.navigator.userAgent])} <br />\n                </p>\n                <button onClick={async () => {\n                    if (window.deferredInstallPrompt === null) return;\n                    alert(\"button\");\n                    window.deferredInstallPrompt.prompt();\n                    const { outcome } = await window.deferredInstallPrompt.userChoice;\n                    alert(`button: ${outcome}`);\n                    window.deferredInstallPrompt = null;\n                }}>Install</button>\n          </header>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nwindow.deferredInstallPrompt = null;\n\nwindow.addEventListener(\"beforeinstallprompt\", (event) => {\n  alert(\"beforeinstallprompt\");\n  event.preventDefault();\n  window.deferredInstallPrompt = event;\n  //showInstallPrompt();\n});\nwindow.addEventListener(\"appinstalled\", () => {\n  alert(\"appinstalled\");\n  //hideInstallPrompt();\n  window.deferredInstallPrompt = null;\n});\n"],"sourceRoot":""}